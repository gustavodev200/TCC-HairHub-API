generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum AssignmentType {
    admin
    employee
    client
    attendant
}

enum Status {
    active
    inactive
}

enum ScheduleStatus {
    scheduled
    confirmed
    awaiting_service
    finished
    canceled
}

model Service {
    id         String       @id @default(uuid())
    name       String       @unique
    image      String?
    time       Int
    price      Float
    status     Status       @default(active)
    created_at DateTime     @default(now())
    updated_at DateTime     @updatedAt
    schedules  Scheduling[]

    @@map("services")
}

model Employee {
    id         String         @id @default(uuid())
    name       String
    image      String?
    cpf        String         @unique
    dataNasc   DateTime
    phone      String
    email      String         @unique
    password   String
    status     Status         @default(active)
    role       AssignmentType @default(employee)
    address    Address        @relation(fields: [address_id], references: [id])
    address_id String         @unique
    schedules  Scheduling[]
    shifts     Shift[]
    created_at DateTime       @default(now())
    updated_at DateTime       @updatedAt

    @@map("employees")
}

model Shift {
    id             String          @id @default(uuid())
    start_time     DateTime
    end_time       DateTime
    available_days AvailableDays[]
    Employee       Employee?       @relation(fields: [employee_id], references: [id])
    employee_id    String?
    order          Int             @default(0)
    created_at     DateTime        @default(now())
    updated_at     DateTime        @updatedAt

    @@map("shifts")
}

model AvailableDays {
    id     String  @id @default(uuid())
    day    Int
    shifts Shift[]

    @@map("days_available")
}

model Client {
    id         String         @id @default(uuid())
    name       String
    cpf        String         @unique
    dataNasc   DateTime
    phone      String
    email      String         @unique
    password   String
    status     Status         @default(active)
    role       AssignmentType @default(client)
    address    Address        @relation(fields: [address_id], references: [id])
    address_id String         @unique
    created_at DateTime       @default(now())
    updated_at DateTime       @updatedAt
    scheduling Scheduling[]

    @@map("clients")
}

model Address {
    id         String    @id @default(uuid())
    cep        String
    city       String
    state      String
    district   String
    street     String
    number     String?
    employee   Employee?
    client     Client?
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt

    @@map("address")
}

model Category {
    id       String    @id @default(uuid())
    name     String    @unique
    products Product[]
    status   Status    @default(active)

    @@map("categories")
}

model Product {
    id          String    @id @default(uuid())
    name        String    @unique
    price       Float
    description String    @db.VarChar(500)
    amount      Int
    status      Status    @default(active)
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    Category    Category? @relation(fields: [category_id], references: [id])
    category_id String?

    @@map("products")
}

model Scheduling {
    id               String         @id @default(uuid())
    appointment_date DateTime
    client           Client         @relation(fields: [client_id], references: [id])
    employee         Employee       @relation(fields: [employee_id], references: [id])
    services         Service[]
    estimated_time   DateTime
    start_time       DateTime
    end_time         DateTime
    schedule_status  ScheduleStatus @default(scheduled)
    client_id        String
    employee_id      String

    @@map("schedules")
}
