generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum AssignmentType {
    admin
    employee
    client
}

enum Status {
    active
    inactive
}

model Service {
    id         String   @id @default(uuid())
    name       String   @unique
    image      String?
    time       Int
    price      Float
    status     Status   @default(active)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("services")
}

model Employee {
    id         String      @id @default(uuid())
    name       String
    image      String?
    cpf        String      @unique
    dataNasc   DateTime
    phone      String
    email      String      @unique
    password   String
    status     Status      @default(active)
    roles      Role[]
    address    Address[]
    user_token UserToken[] @relation("userId")
    created_at DateTime    @default(now())
    updated_at DateTime    @updatedAt

    @@map("employees")
}

model UserToken {
    id            String   @id @default(uuid())
    refresh_token String
    expires_date  DateTime
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
    userId        String
    employee      Employee @relation("userId", fields: [userId], references: [id])

    @@map("user_tokens")
}

model Address {
    id         String   @id @default(uuid())
    cep        String
    county     String
    fu         String
    district   String
    street     String
    number     String?
    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [id])
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("address")
}

model Role {
    id         String         @id @default(uuid())
    type       AssignmentType
    employee   Employee       @relation(fields: [employeeId], references: [id])
    employeeId String
    created_at DateTime       @default(now())
    updated_at DateTime       @updatedAt

    @@map("roles")
}
